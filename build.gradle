plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.liquibase:liquibase-core")
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0")
	compileOnly("org.projectlombok:lombok")
	runtimeOnly("org.postgresql:postgresql")
	annotationProcessor("org.projectlombok:lombok")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("junit:junit:4.13.1")
	testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
	testImplementation("org.testcontainers:testcontainers:1.19.0")
	testImplementation("org.testcontainers:postgresql:1.19.0")
	testImplementation("org.testcontainers:junit-jupiter:1.19.0")
}

tasks.named('test') {
	useJUnitPlatform()
}


task buildFrontend(type: Exec) {
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'cd src/main/frontend && npm run-script build && xcopy dist\\cars\\browser\\* ..\\resources\\static\\ /Y /E '
	} else {
		commandLine 'sh', '-c', 'cd src/main/frontend && npm run-script build && cp -r dist/cars/browser/* ../resources/static/'
	}
}

build.dependsOn buildFrontend
bootJar.dependsOn buildFrontend